list.null.summary <- lapply(list.par_analysis, "[[", "df.null.summary")
list.null.fits <- lapply(list.par_analysis, "[[", "list.null.fits")
### Generating data.frames - USING ldply!
df.null.mapping <- ldply(list.par_analysis, "[[", "df.null.mapping") # the following worked when "scalar variables" were saved in the par.analyze_null_genes list: df.null.mapping <- ldply(list.par_analysis, function(x) {data.frame(x[["n_mapped_genes"]], x[["n_unmapped_genes"]])})
############## Subsequent extractions
####### Extracting fits
list.null.fit.natal <- lapply(list.null.fits, "[[", "fit.natal")
list.null.fit.prioritized.higher <- lapply(list.null.fits, "[[", "fit.prioritized.higher")
###### Combining
df.null.summary <- ldply(list.null.summary) # COMBINING list of data frames
load("RData/analyze_null_genes_Broad_associated_priority.RData") # list.par_analysis + more
list.null.summary <- lapply(list.par_analysis, "[[", "df.null.summary")
list.null.fits <- lapply(list.par_analysis, "[[", "list.null.fits")
### Generating data.frames - USING ldply!
df.null.mapping <- ldply(list.par_analysis, "[[", "df.null.mapping") # the following worked when "scalar variables" were saved in the par.analyze_null_genes list: df.null.mapping <- ldply(list.par_analysis, function(x) {data.frame(x[["n_mapped_genes"]], x[["n_unmapped_genes"]])})
############## Subsequent extractions
####### Extracting fits
list.null.fit.natal <- lapply(list.null.fits, "[[", "fit.natal")
list.null.fit.prioritized.higher <- lapply(list.null.fits, "[[", "fit.prioritized.higher")
###### Combining
df.null.summary <- ldply(list.null.summary) # COMBINING list of data frames
View(df.null.summary)
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- "/Users/pascaltimshel/p_scz/brainspan/src"
setwd(wd)
########################################### LOAD data ###################################
############ ** ASSOCIATED genes ** ##########
load("RData/analyze_null_genes_Broad_associated_priority.RData") # list.par_analysis + more
############ ** PRIORITIZED genes ** ##########
#load("????")
############################# EXTRACT BROAD DATA #################################
############### Extracting from list
list.null.summary <- lapply(list.par_analysis, "[[", "df.null.summary")
list.null.fits <- lapply(list.par_analysis, "[[", "list.null.fits")
### Generating data.frames - USING ldply!
df.null.mapping <- ldply(list.par_analysis, "[[", "df.null.mapping") # the following worked when "scalar variables" were saved in the par.analyze_null_genes list: df.null.mapping <- ldply(list.par_analysis, function(x) {data.frame(x[["n_mapped_genes"]], x[["n_unmapped_genes"]])})
############## Subsequent extractions
####### Extracting fits
list.null.fit.natal <- lapply(list.null.fits, "[[", "fit.natal")
list.null.fit.prioritized.higher <- lapply(list.null.fits, "[[", "fit.prioritized.higher")
###### Combining
df.null.summary <- ldply(list.null.summary) # COMBINING list of data frames
######################################## NULL FILES #######################################
################## SUMMARIZE df.null.summary #######################
df.null.summary.stage <- ddply(df.null.summary, c("stage", "permutation"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd   = sd(mean, na.rm=TRUE))
df.null.summary.stage.mean <- ddply(df.null.summary, c("stage"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd   = sd(mean, na.rm=TRUE))
############################### PLOT - 1 ################################
p <- ggplot(df.null.summary.stage, aes(x=stage, y=mean1, group=permutation)) + geom_line(aes(colour = permutation))
#p <- p + geom_errorbar(aes(ymax = mean + sd, ymin=mean - sd), width=0.2)
#p <- p + guides(colour=guide_legend(nrow = 10))
p <- p + labs(title = "permutation time series")
p
### Adding mean (base line)
p <- p + geom_line(data=df.null.summary.stage.mean, aes(x=stage, y=mean1, group=1), linetype="dashed", size=2.5)
p <- p + geom_errorbar(data=df.null.summary.stage.mean, aes(x=stage, group=1, ymax = mean1 + sd, ymin=mean1 - sd), width=0.2)
p
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
########### SOURCING ###########
source("function_def_stages.R", echo=TRUE)
########### FILES ##############
file.expression_matrix <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/expression_matrix.csv"
file.columns <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/columns_metadata.csv"
file.rows <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/rows_metadata.csv"
### IN src fold
file.gene_length <- "/Users/pascaltimshel/p_scz/brainspan/data/annotation.gene_length.microarray_expression_df_clean.synced.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
############### SYNOPSIS ###################
# Function to read RNAseq expression file
# This function similar to "function_read_marray.R" expect for the INPUT and OUTPUT (.RData) files
# READ RNAseq: the RNAseq expression data NEEDs normalization: we do the processing of the RNAseq data (Winsorizing + log2)
# The ENSEMBL gene identifiers are CLEANED (duplicates removed), but THIS HAS NO EFFECT ON THE RNAseq data.
# OUTPUT: 2x.RData files:
# 1) ""
############################################
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
########### SOURCING ###########
source("function_def_stages.R", echo=TRUE)
########### FILES ##############
file.expression_matrix <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/expression_matrix.csv"
file.columns <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/columns_metadata.csv"
file.rows <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/rows_metadata.csv"
### IN src fold
file.gene_length <- "/Users/pascaltimshel/p_scz/brainspan/data/annotation.gene_length.microarray_expression_df_clean.synced.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
df.gene_length <- read.csv(file.gene_length,h=T)
sum(is.na(df.gene_length$gene_length))
########### READ AND MANIPULATE expression file ###########
### ** THIS TAKES SOME TIME ** ###
df.expression_matrix <- read.csv(file.expression_matrix,h=F,row.names=1) # HEADER FALSE
### Removing duplicates
df.expression_matrix.clean <- df.expression_matrix[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
df.rows.clean <- df.rows[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
### Setting column names - must be done first!
colnames(df.expression_matrix.clean) <- with(df.columns, paste(donor_id, structure_acronym, stage, sep="_"))
### *** Normalizing expression matrix *** ###
#df.expression_matrix.clean <- as.data.frame(scale(df.expression_matrix.clean)) # COLUMN NORMALIZATION
#df.expression_matrix.clean <- (df.expression_matrix.clean-rowMeans(df.expression_matrix.clean))/apply(df.expression_matrix.clean,1,sd) # ROW NORMALIZATION
### *** NEW COLUMNS *** ###
### Setting ensemblID
df.expression_matrix.clean$ensembl_gene_id <- df.rows.clean$ensembl_gene_id
### Setting priorizied factor
#df.expression_matrix.clean$gene_type <- as.factor(ifelse(df.expression_matrix.clean$ensembl_gene_id %in% df.gene_prioritization[,1], "prioritized", "other"))
### Setting gene_length
df.expression_matrix.clean$gene_length <- df.gene_length$gene_length
df.expression_matrix.clean[15000,c("ensembl_gene_id","gene_length")] #---> must give gene_length=13522
str(df.expression_matrix.clean,list.len=Inf)
############################### MANIPULAION - ALL GENES - full ###########################
### Melting dataframe
df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_length"))
#df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_type"))
head(df.expression_matrix.clean.melt)
### Creating new variables from string
variable_split <- strsplit(as.character(df.expression_matrix.clean.melt$variable), "_")
df.expression_matrix.clean.melt$donor_id <- as.factor(sapply(variable_split, "[[", 1))
df.expression_matrix.clean.melt$structure_acronym <- as.factor(sapply(variable_split, "[[", 2))
df.expression_matrix.clean.melt$stage <- as.factor(sapply(variable_split, "[[", 3))
## sorting stage levels
df.expression_matrix.clean.melt$stage <- with(df.expression_matrix.clean.melt, factor(stage, levels(stage)[match(order.stages, levels(stage))]))
## adding stage_natal (prenatal vs post-natal)
df.expression_matrix.clean.melt$natal <- NA
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expression_matrix.clean.melt$natal <- as.factor(df.expression_matrix.clean.melt$natal)
str(df.expression_matrix.clean.melt)
df.expression_matrix.clean.unprocessed <- df.expression_matrix.clean
df.expression_matrix.clean.melt.unprocessed <- df.expression_matrix.clean.melt
################################# SAVING *UNPROCESSED* DATA ###################################
save(df.expression_matrix.clean.unprocessed, df.expression_matrix.clean.melt.unprocessed, file="RData/data_rnaseq_expression_unprocessed.RData")
################################# PROCESSING DATA #####################################
########## Quantiles and values > 50 RPKM
sum(df.expression_matrix.clean.melt$value > 50) # --> 542737
#t <- quantile(df.expression_matrix.clean.melt$value, probs=seq(0,1,0.01))
########## "Winsorizing" samples higher than 50
# **** NEW DATA FRAME
df.expression_matrix.rnaseq.clean.melt.transform <- df.expression_matrix.clean.melt
df.expression_matrix.rnaseq.clean.melt.transform[df.expression_matrix.rnaseq.clean.melt.transform$value > 50, "value"] <- 50
######### Log2(RPKM+1) transforming
df.expression_matrix.rnaseq.clean.melt.transform$value <- log2(df.expression_matrix.rnaseq.clean.melt.transform$value+1)
######## COPYING BACK AGAIN
df.expression_matrix.clean.melt <- df.expression_matrix.rnaseq.clean.melt.transform
################################# SAVING *PROCESSED* DATA (winsorizing, log2) ###################################
### Notice that the "unprocessed" and "processed" data has different variable names
save(df.expression_matrix.clean, df.expression_matrix.clean.melt, file="RData/data_rnaseq_expression_processed.RData") # df.expression_matrix.clean, df.expression_matrix.clean.melt
############### SYNOPSIS ###################
# Function to read RNAseq expression file
# This function similar to "function_read_marray.R" expect for the INPUT and OUTPUT (.RData) files
# READ RNAseq: the RNAseq expression data NEEDs normalization: we do the processing of the RNAseq data (Winsorizing + log2)
# The ENSEMBL gene identifiers are CLEANED (duplicates removed), but THIS HAS NO EFFECT ON THE RNAseq data.
# OUTPUT: 2x.RData files:
# 1) "data_rnaseq_expression_unprocessed.RData"
# 2) "data_rnaseq_expression_processed.RData": winsorized and log2 transformed
# OBS: RNAseq has $gene_length set to a DUMMY VARIABLE (123)
############################################
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
########### SOURCING ###########
source("function_def_stages.R", echo=TRUE)
########### FILES ##############
file.expression_matrix <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/expression_matrix.csv"
file.columns <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/columns_metadata.csv"
file.rows <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/rnaseq/rows_metadata.csv"
#** No gene length file
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
df.gene_length <- read.csv(file.gene_length,h=T)
sum(is.na(df.gene_length$gene_length))
########### READ AND MANIPULATE expression file ###########
### ** THIS TAKES SOME TIME ** ###
df.expression_matrix <- read.csv(file.expression_matrix,h=F,row.names=1) # HEADER FALSE
### Removing duplicates
df.expression_matrix.clean <- df.expression_matrix[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
df.rows.clean <- df.rows[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
### Setting column names - must be done first!
colnames(df.expression_matrix.clean) <- with(df.columns, paste(donor_id, structure_acronym, stage, sep="_"))
### *** Normalizing expression matrix *** ###
#df.expression_matrix.clean <- as.data.frame(scale(df.expression_matrix.clean)) # COLUMN NORMALIZATION
#df.expression_matrix.clean <- (df.expression_matrix.clean-rowMeans(df.expression_matrix.clean))/apply(df.expression_matrix.clean,1,sd) # ROW NORMALIZATION
### *** NEW COLUMNS *** ###
### Setting ensemblID
df.expression_matrix.clean$ensembl_gene_id <- df.rows.clean$ensembl_gene_id
### Setting priorizied factor
#df.expression_matrix.clean$gene_type <- as.factor(ifelse(df.expression_matrix.clean$ensembl_gene_id %in% df.gene_prioritization[,1], "prioritized", "other"))
### Setting gene_length - DUMMY VARIBLE FOR RNAseq
df.expression_matrix.clean$gene_length <- 123
str(df.expression_matrix.clean,list.len=Inf)
############################### MANIPULAION - ALL GENES - full ###########################
### Melting dataframe
df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_length"))
#df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_type"))
head(df.expression_matrix.clean.melt)
### Creating new variables from string
variable_split <- strsplit(as.character(df.expression_matrix.clean.melt$variable), "_")
df.expression_matrix.clean.melt$donor_id <- as.factor(sapply(variable_split, "[[", 1))
df.expression_matrix.clean.melt$structure_acronym <- as.factor(sapply(variable_split, "[[", 2))
df.expression_matrix.clean.melt$stage <- as.factor(sapply(variable_split, "[[", 3))
## sorting stage levels
df.expression_matrix.clean.melt$stage <- with(df.expression_matrix.clean.melt, factor(stage, levels(stage)[match(order.stages, levels(stage))]))
## adding stage_natal (prenatal vs post-natal)
df.expression_matrix.clean.melt$natal <- NA
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expression_matrix.clean.melt$natal <- as.factor(df.expression_matrix.clean.melt$natal)
str(df.expression_matrix.clean.melt)
df.expression_matrix.clean.unprocessed <- df.expression_matrix.clean
df.expression_matrix.clean.melt.unprocessed <- df.expression_matrix.clean.melt
################################# SAVING *UNPROCESSED* DATA ###################################
save(df.expression_matrix.clean.unprocessed, df.expression_matrix.clean.melt.unprocessed, file="RData/data_rnaseq_expression_unprocessed.RData")
################################# PROCESSING DATA #####################################
########## Quantiles and values > 50 RPKM
sum(df.expression_matrix.clean.melt$value > 50) # --> 542737
#t <- quantile(df.expression_matrix.clean.melt$value, probs=seq(0,1,0.01))
########## "Winsorizing" samples higher than 50
# **** NEW DATA FRAME
df.expression_matrix.rnaseq.clean.melt.transform <- df.expression_matrix.clean.melt
df.expression_matrix.rnaseq.clean.melt.transform[df.expression_matrix.rnaseq.clean.melt.transform$value > 50, "value"] <- 50
######### Log2(RPKM+1) transforming
df.expression_matrix.rnaseq.clean.melt.transform$value <- log2(df.expression_matrix.rnaseq.clean.melt.transform$value+1)
######## COPYING BACK AGAIN
df.expression_matrix.clean.melt <- df.expression_matrix.rnaseq.clean.melt.transform
################################# SAVING *PROCESSED* DATA (winsorizing, log2) ###################################
### Notice that the "unprocessed" and "processed" data has different variable names
save(df.expression_matrix.clean, df.expression_matrix.clean.melt, file="RData/data_rnaseq_expression_processed.RData") # df.expression_matrix.clean, df.expression_matrix.clean.melt
n_duplicates <- sum(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE))
print(paste("Number of ENSEMBL Gene IDs (duplicates) removed:", n_duplicates))
file.a.1 <- "../gene_lists/gene_associated.txt"
file.a.2 <- "../gene_lists/depict_broad_analysis_OUTDATED_per_11-13-2014/gene_associated.txt"
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- "/Users/pascaltimshel/p_scz/brainspan/src"
setwd(wd)
file.a.1 <- "../gene_lists/gene_associated.txt"
file.a.2 <- "../gene_lists/depict_broad_analysis_OUTDATED_per_11-13-2014/gene_associated.txt"
df.a.1 <- read.csv(file.a.1)
View(df.a.1)
df.a.2 <- read.csv(file.a.2)
intersect(df.a.1[,1],df.a.2[,1])
x<-intersect(df.a.1[,1],df.a.2[,1])
length(x)
file.p.1 <- "../gene_lists/gene_prioritization.txt"
file.p.2 <- "../gene_lists/depict_broad_analysis_OUTDATED_per_11-13-2014/gene_prioritization.txt"
df.p.1 <- read.csv(file.p.1)
df.p.2 <- read.csv(file.p.2)
x<-intersect(df.p.1[,1],df.p.2[,1])
length(x)
file.p.1 <- "../gene_lists/gene_nearest.txt"
file.p.2 <- "../gene_lists/depict_broad_analysis_OUTDATED_per_11-13-2014/gene_nearest.txt"
df.p.1 <- read.csv(file.p.1)
df.p.2 <- read.csv(file.p.2)
x<-intersect(df.p.1[,1],df.p.2[,1])
length(x)
file.columns <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/columns_metadata.csv"
df.columns <- read.csv(file.columns,h=T,row.names=1)
file.columns <- "../data/141031/microarray/columns_metadata.csv"
#### RNAseq
file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
file.null_genes <- "../Data/schizophrenia_expression325permutations0to999.genes.combined.csv"
df.null_genes <- read.csv(file.null_genes,h=T)
file.null_genes <- "../data/schizophrenia_expression325permutations0to999.genes.combined.csv"
#file.null_genes <- "../data/schizophrenia_expression325permutations0to999.genes.prioritized.top54.combined.csv" # PATH TO PRIORITIZED genes *** #
df.null_genes <- read.csv(file.null_genes,h=T)
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- "/Users/pascaltimshel/p_scz/brainspan/src"
setwd(wd)
############################# LOAD EXPRESSION DATA #################################
#load("data_marray_expression.RData") # df.expression_matrix.clean, df.expression_matrix.clean.melt
load(file="RData/data_rnaseq_expression_processed.RData") # RNAseq AFTER PROCESSING | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
############################# READING GENE LISTs #################################
############# READING GENE LISTs #################################
path.datafiles <- '/Users/pascaltimshel/p_scz/brainspan/gene_lists'
###### Read into a list of files - PATTERN VERSION - read ALL .txt files in directory:
#files <- list.files(path = path.datafiles, pattern = "*.txt", full.names = TRUE) #full path
#names(files) <- list.files(path = path.datafiles, pattern = "*.txt") # filename
#cat(names(files), sep="\n")
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt", "gene_psd_human.txt", "gene_psd_mouse.txt")
filenames2read <- c(filenames2read, "gilman_nn_2012_cluster1.ens", "gilman_nn_2012_cluster1a.ens", "gilman_nn_2012_cluster1b.ens", "gilman_nn_2012_cluster2.ens")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
###################################### PROCESSING GILMAN ################################
gilman_lvl <- c("gilman_nn_2012_cluster1.ens", "gilman_nn_2012_cluster2.ens") # THIS should correspond to the filesnames
###### Mean per stage/structure/cluster
df.gilman.summary.cluster.sem <- ddply(ddply(subset(df.gene_list, gene_list %in% gilman_lvl), .(stage, structure_acronym, gene_list), summarise, mean=mean(value, na.rm=TRUE)), .(stage, gene_list), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
## plyr magic for renaming column and factor level
df.gilman.summary.cluster.sem <- rename(df.gilman.summary.cluster.sem, c("gene_list"="cluster")) # column
df.gilman.summary.cluster.sem$cluster <- revalue(df.gilman.summary.cluster.sem$cluster, c("gilman_nn_2012_cluster1.ens"="clusterI", "gilman_nn_2012_cluster2.ens"="clusterII"))
###### Mean per stage/structure ########
df.gilman.summary <- ddply(subset(df.gene_list, gene_list %in% gilman_lvl), c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
###### Mean per stage - FINAL ##########
df.gilman.summary.sem <- ddply(df.gilman.summary, c("stage"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### PROCESSING GENE lists ################################
###### Mean per stage/structure ########
df.summary <- ddply(df.gene_list, c("stage", "structure_acronym", "gene_list"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
## plyr magic for renaming factor level
levels(df.summary$gene_list)
df.summary$gene_list <- revalue(df.summary$gene_list, c("gene_associated.txt"="Associated Genes", "gene_nearest.txt"="Nearest Genes", "gene_prioritization.txt"="Prioritized Genes", "gene_psd_human.txt"="Post Synaptic Genes (Human)", "gene_psd_mouse.txt"="Post Synaptic Genes (Mouse)"))
levels(df.summary$gene_list)
###### Mean per stage - FINAL ##########
df.summary.sem <- ddply(df.summary, c("stage","gene_list"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### Calculating overall mean ################################
### *** Runtime ~ 10 s ***
df.all.sem <- ddply(ddply(df.expression_matrix.clean.melt, .(stage, structure_acronym), summarise, mean=mean(value, na.rm=TRUE)), .(stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
###################################### PLOT ################################
########### PLOT IT! ###########
p <- ggplot()
p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding GILMAN to plot - MERGED cI and cII (df.gilman.summary.sem)
p <- p + geom_line(data=df.gilman.summary.sem, aes(x=stage, y=mean1, group=1, color="Gilman et al. cluster I & II"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.gilman.summary.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='#2b83ba', width=0.2)
p
### Adding GILMAN to plot - individual cI and cII (df.gilman.summary.cluster.sem)
#p <- p + geom_line(data=df.gilman.summary.cluster.sem, aes(x=stage, y=mean1, group=cluster, linetype=cluster), color="#2b83ba", size=1) # GILMANN cluster Ia, Ib, II
#p <- p + geom_errorbar(data=df.gilman.summary.cluster.sem, aes(x=stage, group=cluster, ymax=mean1+sd1, ymin=mean1-sd1),color='#2b83ba', width=0.2)
#p
### Adding Nearest Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
#p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding Post Synaptic Genes (Human)
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Human)"), aes(x=stage, y=mean1, group=1, color="Post synaptic genes (human)"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Human)"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='black', width=0.2)
#p
### Adding Post Synaptic Genes (Mouse)
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Mouse)"), aes(x=stage, y=mean1, group=1, color="Post synaptic genes (mouse)"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Mouse)"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='black', width=0.2)
#p
p <- p + scale_color_manual(name="Gene Set", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. cluster I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
guide='legend'))
p
#p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(linetype=c("dashed","solid"), size=c(1.25, 0.5) )))
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
# c("s1", "s2a", "s2b", "s3a", "s3b", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s11")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
p <- p + labs(y="Mean brain expression")
p
p <- ggplot()
p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
p <- p + geom_line(data=df.gilman.summary.sem, aes(x=stage, y=mean1, group=1, color="Gilman et al. cluster I & II"), linetype='solid', size=1)
### Adding GILMAN to plot - MERGED cI and cII (df.gilman.summary.sem)
p <- p + geom_errorbar(data=df.gilman.summary.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='#2b83ba', width=0.2)
p
### Adding GILMAN to plot - individual cI and cII (df.gilman.summary.cluster.sem)
#p <- p + geom_line(data=df.gilman.summary.cluster.sem, aes(x=stage, y=mean1, group=cluster, linetype=cluster), color="#2b83ba", size=1) # GILMANN cluster Ia, Ib, II
#p <- p + geom_errorbar(data=df.gilman.summary.cluster.sem, aes(x=stage, group=cluster, ymax=mean1+sd1, ymin=mean1-sd1),color='#2b83ba', width=0.2)
#p
### Adding Nearest Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
#p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding Post Synaptic Genes (Human)
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Human)"), aes(x=stage, y=mean1, group=1, color="Post synaptic genes (human)"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Human)"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='black', width=0.2)
#p
### Adding Post Synaptic Genes (Mouse)
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Mouse)"), aes(x=stage, y=mean1, group=1, color="Post synaptic genes (mouse)"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Post Synaptic Genes (Mouse)"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='black', width=0.2)
#p
p <- p + scale_color_manual(name="Gene Set", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. cluster I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (human)"="blue",
"Post synaptic genes (mouse)"="green",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
p <- p + labs(y="Mean brain expression")
p
