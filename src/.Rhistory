file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
file.rows <- "../data/141031/rnaseq/rows_metadata.csv"
#** No gene length file
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
wd <- path.expand("~/Dropbox/0_Projects/p_EAv2/git/EAv2/src")
rm(list=ls())
wd <- path.expand("~/Dropbox/0_Projects/p_EAv2/git/EAv2/src")
setwd(wd)
########### SOURCING - **OBS**: HIGH RES! ###########
#source("function_def_stages.R", echo=TRUE)
source("function_def_stages.corrected.R", echo=TRUE) # New march 2015
#### New: this will define the order of the age factor
#### I created this vector partial manually.
##### I have TESTED it and it is correct FOR RNASEQ (needs validation in Microarray)
#### BE CAREFUL IF UPDATEING THE DATA SET (including new years)
order.age <- c("8 pcw","9 pcw","12 pcw","13 pcw","16 pcw","17 pcw","19 pcw","21 pcw","24 pcw","25 pcw","26 pcw","35 pcw","37 pcw",
"4 mos","10 mos",
"1 yrs","2 yrs","3 yrs","4 yrs","8 yrs",
"11 yrs","13 yrs","15 yrs","18 yrs","19 yrs",
"21 yrs","23 yrs","30 yrs","36 yrs","37 yrs","40 yrs")
########### FILES ##############
file.expression_matrix <- "../data/141031/rnaseq/expression_matrix.csv"
file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
file.rows <- "../data/141031/rnaseq/rows_metadata.csv"
#** No gene length file
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
########### FILES ##############
file.expression_matrix <- "../data/141031/rnaseq/expression_matrix.csv"
file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
file.rows <- "../data/141031/rnaseq/rows_metadata.csv"
#** No gene length file
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
############### SYNOPSIS ###################
# Function to read RNAseq expression file
# This function similar to "function_read_marray.R" expect for the INPUT and OUTPUT (.RData) files
# READ RNAseq: the RNAseq expression data NEEDs normalization: we do the processing of the RNAseq data (Winsorizing + log2)
# The ENSEMBL gene identifiers are CLEANED (duplicates removed), but THIS HAS NO EFFECT ON THE RNAseq data.
# OUTPUT: 2x.RData files:
# 1) "data_rnaseq_expression_unprocessed.RData"
# 2) "data_rnaseq_expression_processed.RData": winsorized and log2 transformed
# OBS: RNAseq has $gene_length set to a DUMMY VARIABLE (123)
############################################
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext, path.expand()
rm(list=ls())
wd <- path.expand("~/Dropbox/0_Projects/p_EAv2/git/EAv2/src")
setwd(wd)
########### SOURCING - **OBS**: HIGH RES! ###########
#source("function_def_stages.R", echo=TRUE)
source("function_def_stages.corrected.R", echo=TRUE) # New march 2015
#### New: this will define the order of the age factor
#### I created this vector partial manually.
##### I have TESTED it and it is correct FOR RNASEQ (needs validation in Microarray)
#### BE CAREFUL IF UPDATEING THE DATA SET (including new years)
order.age <- c("8 pcw","9 pcw","12 pcw","13 pcw","16 pcw","17 pcw","19 pcw","21 pcw","24 pcw","25 pcw","26 pcw","35 pcw","37 pcw",
"4 mos","10 mos",
"1 yrs","2 yrs","3 yrs","4 yrs","8 yrs",
"11 yrs","13 yrs","15 yrs","18 yrs","19 yrs",
"21 yrs","23 yrs","30 yrs","36 yrs","37 yrs","40 yrs")
########### FILES ##############
file.expression_matrix <- "../data/141031/rnaseq/expression_matrix.csv"
file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
file.rows <- "../data/141031/rnaseq/rows_metadata.csv"
#** No gene length file
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
###*** NO GENE LENGTH FILE
########### READ AND MANIPULATE expression file ###########
### ** THIS TAKES SOME TIME ** ###
df.expression_matrix <- read.csv(file.expression_matrix,h=F,row.names=1) # HEADER FALSE
### Removing duplicates
df.expression_matrix.clean <- df.expression_matrix[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
df.rows.clean <- df.rows[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
# Print the sum of duplicates
n_duplicates <- sum(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE))
print(paste("Number of ENSEMBL Gene IDs (duplicates) removed:", n_duplicates))
############################# ** NEW 12/01/2014 **###########################
### Setting column names - must be done first!
#colnames(df.expression_matrix.clean) <- with(df.columns, paste(donor_id, structure_acronym, stage, sep="_")) # BEFORE 12/01/2014
colnames(df.expression_matrix.clean) <- with(df.columns, paste(donor_id, structure_acronym, stage, age, gender, sep="_")) # NEW - added
colnames(df.expression_matrix.clean)
### Setting ensemblID
df.expression_matrix.clean$ensembl_gene_id <- df.rows.clean$ensembl_gene_id
### Setting gene_length - DUMMY VARIBLE FOR RNAseq
df.expression_matrix.clean$gene_length <- 123
str(df.expression_matrix.clean,list.len=Inf)
############################### MANIPULAION - ALL GENES - full ###########################
### Melting dataframe
df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_length"))
#df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_type"))
head(df.expression_matrix.clean.melt)
### Creating new variables from string
variable_split <- strsplit(as.character(df.expression_matrix.clean.melt$variable), "_") # THIS takes a LOOONG time
df.expression_matrix.clean.melt$donor_id <- as.factor(sapply(variable_split, "[[", 1))
df.expression_matrix.clean.melt$structure_acronym <- as.factor(sapply(variable_split, "[[", 2))
df.expression_matrix.clean.melt$stage <- as.factor(sapply(variable_split, "[[", 3))
### sorting stage levels
df.expression_matrix.clean.melt$stage <- with(df.expression_matrix.clean.melt, factor(stage, levels(stage)[match(order.stages, levels(stage))]))
head(df.expression_matrix.clean.melt)
############################# ** NEW 12/01/2014
### adding age
df.expression_matrix.clean.melt$age <- as.factor(sapply(variable_split, "[[", 4))
levels(df.expression_matrix.clean.melt$age) # check the order
# soring age factor levels
df.expression_matrix.clean.melt$age <- with(df.expression_matrix.clean.melt, factor(age, levels(age)[match(order.age, levels(age))]))
levels(df.expression_matrix.clean.melt$age)
head(df.expression_matrix.clean.melt)
### adding gender
df.expression_matrix.clean.melt$gender <- as.factor(sapply(variable_split, "[[", 5))
############################# Setting pre and post natal stages ###########################
## adding stage_natal (prenatal vs post-natal)
df.expression_matrix.clean.melt$natal <- NA
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expression_matrix.clean.melt$natal <- as.factor(df.expression_matrix.clean.melt$natal)
str(df.expression_matrix.clean.melt)
df.expression_matrix.clean.unprocessed <- df.expression_matrix.clean
df.expression_matrix.clean.melt.unprocessed <- df.expression_matrix.clean.melt
save(df.expression_matrix.clean.unprocessed, df.expression_matrix.clean.melt.unprocessed, file="RData/data_rnaseq_expression_unprocessed_full_res.corrected-03-23-2015.RData")
# **** NEW DATA FRAME
df.expression_matrix.rnaseq.clean.melt.transform <- df.expression_matrix.clean.melt
df.expression_matrix.rnaseq.clean.melt.transform[df.expression_matrix.rnaseq.clean.melt.transform$value > 50, "value"] <- 50
######### Log2(RPKM+1) transforming
df.expression_matrix.rnaseq.clean.melt.transform$value <- log2(df.expression_matrix.rnaseq.clean.melt.transform$value+1)
######## COPYING BACK AGAIN
df.expression_matrix.clean.melt <- df.expression_matrix.rnaseq.clean.melt.transform
save(df.expression_matrix.clean, df.expression_matrix.clean.melt, file="RData/data_rnaseq_expression_processed_full_res-03-23-2015.RData") # df.expression_matrix.clean, df.expression_matrix.clean.melt
library(tools)
library(ggplot2)
library(reshape2)
library(plyr)
library(tools)
rm(list=ls())
wd <- path.expand("~/Dropbox/0_Projects/p_EAv2/git/EAv2/src")
setwd(wd)
########### SOURCING ###########
source("function_def_stages.corrected.R", echo=TRUE)
######### Adding x-tickmarks for stage
do_stage_converter <- function (p) {
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s7"="Late infancy",
"s6"="Early infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
return(p)
}
###############################
#### MICROARRAY
#file.columns <- "../data/141031/microarray/columns_metadata.csv"
#### RNAseq
file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
######### Number of factor levels for variables
paste("Number of unique donors:", length(unique(df.columns$donor_id)))
paste("Number of unique age:", length(unique(df.columns$age)))
paste("Number of unique structure_acronum:", length(unique(df.columns$structure_acronym)))
############ Plot contingency table
table.contingency <- table(df.columns$stage, df.columns$structure_acronym)
df.contingency.melt <- melt(table.contingency, varnames=c("stage", "structure"), value.name=c("count"))
p <- ggplot(df.contingency.melt, aes(x=stage,y=structure)) + geom_tile(aes(fill=count))
p <- p + geom_text(aes(label=count), size=rel(5), color="white", family="mono")
p
### Margins
df.margin.stage <- data.frame(margin.table(table.contingency, 1))
df.margin.structure <- data.frame(margin.table(table.contingency, 2))
###### Stage plot
p <- ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + labs(x="Stage", y="#Samples")
p
p <- do_stage_converter(p)
p + theme(text = element_text(size=15))
############ Plot contingency table
table.contingency <- table(df.columns$stage, df.columns$structure_acronym)
df.contingency.melt <- melt(table.contingency, varnames=c("stage", "structure"), value.name=c("count"))
p <- ggplot(df.contingency.melt, aes(x=stage,y=structure)) + geom_tile(aes(fill=count))
p <- p + geom_text(aes(label=count), size=rel(5), color="white", family="mono")
p
ggsave("diagnostics_contingency_matrix.pdf")
p <- ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + labs(x="Stage", y="#Samples")
p
p <- do_stage_converter(p)
p + theme(text = element_text(size=15))
ggsave("barplot_stage_with_names-8x5.pdf", w=8, h=5)
label.y <- expression(paste("Mean median brain expression (log_2RPKM)"))
p <- p + labs(y=label.y)
p
label.y <- expression(paste("Mean median brain expression (log_{2}RPKM)"))
p <- p + labs(y=label.y)
label.y <- expression(paste("Mean median brain expression", log2, "RPKM)"))
p <- p + labs(y=label.y)
label.y <- expression(paste("Mean median brain expression", beta, "RPKM)"))
p <- p + labs(y=label.y)
label.y <- expression(paste("Mean median brain expression", beta, "RPKM)"))
p <- p + labs(y=label.y)
p
label.y <- expression(paste("Mean median brain expression", log2, "RPKM)"))
p <- p + labs(y=label.y)
p
label.y <- expression(paste("Mean median brain expression", log{2}, "RPKM)"))
p <- p + labs(y=label.y)
p
label.y <- expression(paste("Mean median brain expression", log_2, "RPKM)"))
p <- p + labs(y=label.y)
p
label.y <- expression(paste("Mean median brain expression", log, "RPKM)"))
p <- p + labs(y=label.y)
p
label.y <- expression(paste("Mean median brain expression (log2 RPKM)"))
p <- p + labs(y=label.y)
p
load(file="RData/data_rnaseq_expression_processed_full_res-03-23-2015.RData") # AFTER CORRECTING STAGES MISPLACEMENT | RNAseq AFTER PROCESSING | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
############################# READING GENE LISTs #################################
path.datafiles <- path.expand(sprintf("~/p_EAv2/git/EAv2/gene_lists/%s", release))
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
###################################### PROCESSING GENE lists ################################
###### Mean per stage/structure ########
df.summary <- ddply(df.gene_list, c("stage", "structure_acronym", "gene_list"), summarise,
mean = median(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
## plyr magic for renaming factor level
levels(df.summary$gene_list)
df.summary$gene_list <- revalue(df.summary$gene_list, c("gene_associated.txt"="Associated Genes", "gene_nearest.txt"="Nearest Genes", "gene_prioritization.txt"="Prioritized Genes"))
levels(df.summary$gene_list)
###### Mean per stage - FINAL ##########
df.summary.sem <- ddply(df.summary, c("stage","gene_list"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### Calculating overall mean ################################
### *** Runtime ~ 10 s ***
df.all.sem <- ddply(ddply(df.expression_matrix.clean.melt, .(stage, structure_acronym), summarise, mean=median(value, na.rm=TRUE)), .(stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
###################################### Save DATA ################################
#save(file="RData/data_rnaseq_expression_processed_with_gene_lists.RData")
###################################### PLOT - 1 ################################
########### PLOT IT! ###########
p <- ggplot()
p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Nearest Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
#p
### Adding Associated Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
#p
p <- p + scale_color_manual(name="Gene list", values=c(
"Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Nearest genes"="sky blue",
"Associated genes"="orange",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
label.y <- expression(paste("Mean median brain expression (log2 RPKM)"))
p <- p + labs(y=label.y)
p
p <- ggplot()
p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Nearest Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
#p
### Adding Associated Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
#p
p <- p + scale_color_manual(name="Gene list", values=c(
"Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Nearest genes"="sky blue",
"Associated genes"="orange",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
label.y <- expression(paste("Mean median brain expression (log2 RPKM)"))
p <- p + labs(y=label.y)
p
############### SYNAPSIS ###################
# Name: graphics_main1_median.R
# This script is a newer version of "graphics_main1.R".
# The script LOADs EITHER microarray data OR PROCESSED RNAseq data.
# It was created to be able to handle multiple gene list for plotting. The script uses plyr to load in multiple gene lists.
# You may choose what files to load
# The script also process and loads GILMAN gene clusters (1, 1a, 1b and 2)
# The script was used to generate PUBLICATION READY GRAPHICS
# THIS VERSION TAKES THE MEDIAN GENE EXPRESSION VALUES.
############################################
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- path.expand("~/p_EAv2/git/EAv2/src")
setwd(wd)
#release <- "release_v1"
release <- "release_v2"
############################# LOAD EXPRESSION DATA #################################
#load(file="RData/data_marray_expression.RData") # df.expression_matrix.clean, df.expression_matrix.clean.melt
#load(file="RData/data_rnaseq_expression_processed.RData") # RNAseq AFTER PROCESSING | df.expression_matrix.clean, df.expression_matrix.clean.melt
load(file="RData/data_rnaseq_expression_processed_full_res-03-23-2015.RData") # AFTER CORRECTING STAGES MISPLACEMENT | RNAseq AFTER PROCESSING | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
############################# READING GENE LISTs #################################
path.datafiles <- path.expand(sprintf("~/p_EAv2/git/EAv2/gene_lists/%s", release))
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
###################################### PROCESSING GENE lists ################################
###### Mean per stage/structure ########
df.summary <- ddply(df.gene_list, c("stage", "structure_acronym", "gene_list"), summarise,
mean = median(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
## plyr magic for renaming factor level
levels(df.summary$gene_list)
df.summary$gene_list <- revalue(df.summary$gene_list, c("gene_associated.txt"="Associated Genes", "gene_nearest.txt"="Nearest Genes", "gene_prioritization.txt"="Prioritized Genes"))
levels(df.summary$gene_list)
###### Mean per stage - FINAL ##########
df.summary.sem <- ddply(df.summary, c("stage","gene_list"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### Calculating overall mean ################################
### *** Runtime ~ 10 s ***
df.all.sem <- ddply(ddply(df.expression_matrix.clean.melt, .(stage, structure_acronym), summarise, mean=median(value, na.rm=TRUE)), .(stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
###################################### PLOT - 1 ################################
########### PLOT IT! ###########
p <- ggplot()
p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Nearest Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
#p
### Adding Associated Genes
#p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
#p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
#p
p <- p + scale_color_manual(name="Gene list", values=c(
"Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Nearest genes"="sky blue",
"Associated genes"="orange",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
label.y <- expression(paste("Mean median brain expression (log2 RPKM)"))
p <- p + labs(y=label.y)
p
ggsave("main1_rnaseq_release_v1_median_ONLY_PRIORITIZED-9x6.pdf", w=9, h=6)
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
ggsave("main1_rnaseq_release_v1_median-9x6.pdf", w=9, h=6)
