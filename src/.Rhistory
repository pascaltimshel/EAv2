stages[["s10"]] = c("13 yrs","15 yrs","18 yrs","19 yrs") # 10 12-19 yrs Adolescence
stages[["s11"]] = c("21 yrs","23 yrs","30 yrs","36 yrs","37 yrs","40 yrs") # 11 20-60+ yrs Adulthood
order.stages <- c("s1", "s2a", "s2b", "s3a", "s3b", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s11")
file.expression_matrix <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/expression_matrix.csv"
file.columns <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/columns_metadata.csv"
file.rows <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/rows_metadata.csv"
### IN src fold
file.gene_length <- "/Users/pascaltimshel/p_scz/brainspan/src/df.clean.gene_length.insync.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
df.gene_length <- read.csv(file.gene_length,h=T)
sum(is.na(df.gene_length$gene_length))
########### READ AND MANIPULATE expression file ###########
### ** THIS TAKES SOME TIME ** ###
df.expression_matrix <- read.csv(file.expression_matrix,h=F,row.names=1) # HEADER FALSE
### Removing duplicates
df.expression_matrix.clean <- df.expression_matrix[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
df.rows.clean <- df.rows[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
### Setting column names - must be done first!
colnames(df.expression_matrix.clean) <- with(df.columns, paste(donor_id, structure_acronym, stage, sep="_"))
### *** Normalizing expression matrix *** ###
#df.expression_matrix.clean <- as.data.frame(scale(df.expression_matrix.clean)) # COLUMN NORMALIZATION
#df.expression_matrix.clean <- (df.expression_matrix.clean-rowMeans(df.expression_matrix.clean))/apply(df.expression_matrix.clean,1,sd) # ROW NORMALIZATION
### *** NEW COLUMNS *** ###
### Setting ensemblID
df.expression_matrix.clean$ensembl_gene_id <- df.rows.clean$ensembl_gene_id
### Setting priorizied factor
#df.expression_matrix.clean$gene_type <- as.factor(ifelse(df.expression_matrix.clean$ensembl_gene_id %in% df.gene_prioritization[,1], "prioritized", "other"))
### Setting gene_length
df.expression_matrix.clean$gene_length <- df.gene_length$gene_length
df.expression_matrix.clean[15000,c("ensembl_gene_id","gene_length")] #---> must give gene_length=13522
str(df.expression_matrix.clean,list.len=Inf)
########################### NULL FILES ####################
######### Reading null file
file.null_genes <- "/Users/pascaltimshel/p_scz/brainspan/src/schizophrenia_expression325permutations0to999.genes.combined.csv"
df.null_genes <- read.csv(file.null_genes,h=T)
str(df.null_genes)
n_permutations <- length(unique(df.null_genes$permutation))
######## Exploratory analysis
df.null.stats <- ddply(df.null_genes, c("permutation"), summarise,
n = length(ensembl_gene_id))
### histogram plot
ggplot(df.null.stats, aes(x=n)) + geom_histogram(aes(y = ..density..)) + geom_density() + labs(title="number of associated genes")
### range of associated loci
range(df.null.stats$n) # range: 348 492
mean(df.null.stats$n) # mean: 398.31
sum(df.null.stats$n<363) # number of permutations with less than 363 associations: 19
### Initializing data frame
df.null.mapping <- data.frame(n_mapped_genes=NA, n_unmapped_genes=NA)
#df.null.mean <- data.frame(matrix(NA, nrow = n_permutations, ncol = 12))
list.null <- list()
list.null.natal_fits <- list()
### Running loop
for (i in min(df.null_genes$permutation):max(df.null_genes$permutation)) {
#for (i in 0:2) {
time.start <- proc.time()
i = i+1
print(i)
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
df.null.mapping[i,"n_mapped_genes"] <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
df.null.mapping[i,"n_unmapped_genes"] <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
#cat(as.character(df.null.current[!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id, "ensembl_gene_id"]), sep="\n") # print non-mapped genes
########### Extracting expression data for current null genes ##########
#df.expr.subset <- subset(df.expression_matrix.clean, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
#print(dim(df.expr.subset))
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
list.null.natal_fits[[i]] <- fit1
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
list.null[[i]] <- df.summary
names(list.null)[i] <- paste("perm",i,sep="")
time.elapsed <- proc.time() - time.start
print(time.elapsed)
}
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- "/Users/pascaltimshel/p_scz/brainspan/src"
setwd(wd)
################### Defining stages ####################
stages = list()
stages[["s1"]] = c() # 1 4-7 pcw Embryonic
stages[["s2a"]] = c("8 pcw","9 pcw") # 2A 8-9 pcw Early prenatal
stages[["s2b"]] = c("12 pcw") # 2B 10-12 pcw Early prenatal
stages[["s3a"]] = c("13 pcw") # 3A 13-15 pcw Early mid-prenatal
stages[["s3b"]] = c("16 pcw","17 pcw") # 3B 16-18 pcw Early mid-prenatal
stages[["s4"]] = c("19 pcw","21 pcw","24 pcw") # 4 19-24 pcw Late mid-prenatal
stages[["s5"]] = c("25 pcw","26 pcw","35 pcw","37 pcw") # 5 25-38 pcw Late prenatal
stages[["s6"]] = c("4 mos") # 6 Birth-5 months Early infancy
stages[["s7"]] = c("10 mos") # 7 6-18 months Late infancy
stages[["s8"]] = c("1 yrs","2 yrs","3 yrs","4 yrs") # 8 19 months-5 yrs Early childhood
stages[["s9"]] = c("8 yrs","11 yrs") # 9 6-11 yrs Late childhood
stages[["s10"]] = c("13 yrs","15 yrs","18 yrs","19 yrs") # 10 12-19 yrs Adolescence
stages[["s11"]] = c("21 yrs","23 yrs","30 yrs","36 yrs","37 yrs","40 yrs") # 11 20-60+ yrs Adulthood
order.stages <- c("s1", "s2a", "s2b", "s3a", "s3b", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s11")
file.expression_matrix <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/expression_matrix.csv"
file.columns <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/columns_metadata.csv"
file.rows <- "/Users/pascaltimshel/p_scz/brainspan/data/141031/microarray/rows_metadata.csv"
### IN src fold
file.gene_length <- "/Users/pascaltimshel/p_scz/brainspan/src/df.clean.gene_length.insync.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
########### READ row file ###########
df.rows <- read.csv(file.rows,h=T,row.names=1)
########### READ gene_length file ###########
df.gene_length <- read.csv(file.gene_length,h=T)
sum(is.na(df.gene_length$gene_length))
########### READ AND MANIPULATE expression file ###########
### ** THIS TAKES SOME TIME ** ###
df.expression_matrix <- read.csv(file.expression_matrix,h=F,row.names=1) # HEADER FALSE
### Removing duplicates
df.expression_matrix.clean <- df.expression_matrix[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
df.rows.clean <- df.rows[!(duplicated(df.rows$ensembl_gene_id) | duplicated(df.rows$ensembl_gene_id, fromLast = TRUE)), ]
### Setting column names - must be done first!
colnames(df.expression_matrix.clean) <- with(df.columns, paste(donor_id, structure_acronym, stage, sep="_"))
### *** Normalizing expression matrix *** ###
#df.expression_matrix.clean <- as.data.frame(scale(df.expression_matrix.clean)) # COLUMN NORMALIZATION
#df.expression_matrix.clean <- (df.expression_matrix.clean-rowMeans(df.expression_matrix.clean))/apply(df.expression_matrix.clean,1,sd) # ROW NORMALIZATION
### *** NEW COLUMNS *** ###
### Setting ensemblID
df.expression_matrix.clean$ensembl_gene_id <- df.rows.clean$ensembl_gene_id
### Setting priorizied factor
#df.expression_matrix.clean$gene_type <- as.factor(ifelse(df.expression_matrix.clean$ensembl_gene_id %in% df.gene_prioritization[,1], "prioritized", "other"))
### Setting gene_length
df.expression_matrix.clean$gene_length <- df.gene_length$gene_length
df.expression_matrix.clean[15000,c("ensembl_gene_id","gene_length")] #---> must give gene_length=13522
str(df.expression_matrix.clean,list.len=Inf)
############################### MANIPULAION - ALL GENES - full ###########################
### Melting dataframe
df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_length"))
#df.expression_matrix.clean.melt <- melt(df.expression_matrix.clean, id=c("ensembl_gene_id", "gene_type"))
head(df.expression_matrix.clean.melt)
### Creating new variables from string
variable_split <- strsplit(as.character(df.expression_matrix.clean.melt$variable), "_")
df.expression_matrix.clean.melt$donor_id <- as.factor(sapply(variable_split, "[[", 1))
df.expression_matrix.clean.melt$structure_acronym <- as.factor(sapply(variable_split, "[[", 2))
df.expression_matrix.clean.melt$stage <- as.factor(sapply(variable_split, "[[", 3))
## sorting stage levels
df.expression_matrix.clean.melt$stage <- with(df.expression_matrix.clean.melt, factor(stage, levels(stage)[match(order.stages, levels(stage))]))
## adding stage_natal (prenatal vs post-natal)
df.expression_matrix.clean.melt$natal <- NA
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expression_matrix.clean.melt[df.expression_matrix.clean.melt$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expression_matrix.clean.melt$natal <- as.factor(df.expression_matrix.clean.melt$natal)
str(df.expression_matrix.clean.melt)
########################### NULL FILES ####################
######### Reading null file
file.null_genes <- "/Users/pascaltimshel/p_scz/brainspan/src/schizophrenia_expression325permutations0to999.genes.combined.csv"
df.null_genes <- read.csv(file.null_genes,h=T)
str(df.null_genes)
n_permutations <- length(unique(df.null_genes$permutation))
######## Exploratory analysis
df.null.stats <- ddply(df.null_genes, c("permutation"), summarise,
n = length(ensembl_gene_id))
### histogram plot
ggplot(df.null.stats, aes(x=n)) + geom_histogram(aes(y = ..density..)) + geom_density() + labs(title="number of associated genes")
### range of associated loci
range(df.null.stats$n) # range: 348 492
mean(df.null.stats$n) # mean: 398.31
sum(df.null.stats$n<363) # number of permutations with less than 363 associations: 19
### Initializing data frame
df.null.mapping <- data.frame(n_mapped_genes=NA, n_unmapped_genes=NA)
#df.null.mean <- data.frame(matrix(NA, nrow = n_permutations, ncol = 12))
list.null <- list()
list.null.natal_fits <- list()
### Running loop
for (i in min(df.null_genes$permutation):max(df.null_genes$permutation)) {
#for (i in 0:2) {
time.start <- proc.time()
i = i+1
print(i)
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
df.null.mapping[i,"n_mapped_genes"] <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
df.null.mapping[i,"n_unmapped_genes"] <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
#cat(as.character(df.null.current[!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id, "ensembl_gene_id"]), sep="\n") # print non-mapped genes
########### Extracting expression data for current null genes ##########
#df.expr.subset <- subset(df.expression_matrix.clean, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
#print(dim(df.expr.subset))
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
list.null.natal_fits[[i]] <- fit1
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
list.null[[i]] <- df.summary
names(list.null)[i] <- paste("perm",i,sep="")
time.elapsed <- proc.time() - time.start
print(time.elapsed)
}
library(parallel)
save(df.null.combined, list.null, list.null.natal_fits, file = "analyze_null_genes.RData")
a<-list.null[[1]]
names(list.null)
#### list.null
list.null.natal_fits[[1]]$statistic
######## COMBINING list of data frames
df.null.combined <- ldply(list.null)
### Save to .Rdata
save(df.null.combined, list.null, list.null.natal_fits, file = "analyze_null_genes.RData")
library(foreach)
library(doMC)
?foreach
?registerDoParallel
library(doParallel)
?registerDoParallel
library(doParallel}
library(doParallel)
registerDoParallel(cores=2)
foreach(i=1:3) %dopar% sqrt(i)
foreach(i=1:3) %dopar% sqrt(i)
registerDoParallel(cores=2)
x<-foreach(i=1:3) %dopar% sqrt(i)
x
?makeCluster
library(parallel)
registerDoParallel(4)
getDoParWorkers()
?getDoParWorkers()
?makeCluster
?registerDoParallel
?stopCluster
?foreach
library(foreach)
library(doMC)
#list.par_analysis <- foreach (i=min(df.null_genes$permutation):max(df.null_genes$permutation)) %dopar% {
list.par_analysis <- foreach (i=1:12) %dopar% {
i = i+1
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
n_mapped_genes <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
n_unmapped_genes <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
########### Extracting expression data for current null genes ##########
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
########################## Returning results ######################
list(n_mapped_genes=n_mapped_genes, n_unmapped_genes=n_unmapped_genes, list.null=df.summary, list.null.natal_fits=fit1)
}
detectCores()
n_cpu <- detectCores()
print(n_cpu)
registerDoMC(detectCores())
getDoParWorkers()
#list.par_analysis <- foreach (i=min(df.null_genes$permutation):max(df.null_genes$permutation)) %dopar% {
list.par_analysis <- foreach (i=1:12) %dopar% {
i = i+1
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
n_mapped_genes <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
n_unmapped_genes <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
########### Extracting expression data for current null genes ##########
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
########################## Returning results ######################
list(n_mapped_genes=n_mapped_genes, n_unmapped_genes=n_unmapped_genes, list.null=df.summary, list.null.natal_fits=fit1)
}
#list.par_analysis <- foreach (i=min(df.null_genes$permutation):max(df.null_genes$permutation)) %dopar% {
time_start <- proc.time()
list.par_analysis <- foreach (i=1:12) %dopar% {
i = i+1
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
n_mapped_genes <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
n_unmapped_genes <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
########### Extracting expression data for current null genes ##########
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
########################## Returning results ######################
list(n_mapped_genes=n_mapped_genes, n_unmapped_genes=n_unmapped_genes, list.null=df.summary, list.null.natal_fits=fit1)
}
time_elapsed <- proc.time() - time_start
time_elapsed
time_elapsed
time_elapsed
n_cpu <- detectCores()
print(n_cpu)
#registerDoMC(detectCores())
registerDoMC(1)
getDoParWorkers()
#list.par_analysis <- foreach (i=min(df.null_genes$permutation):max(df.null_genes$permutation)) %dopar% {
time_start <- proc.time()
list.par_analysis <- foreach (i=1:12) %dopar% {
i = i+1
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
n_mapped_genes <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
n_unmapped_genes <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
########### Extracting expression data for current null genes ##########
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
########### Calculating summaries ##########
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
########################## Returning results ######################
list(n_mapped_genes=n_mapped_genes, n_unmapped_genes=n_unmapped_genes, list.null=df.summary, list.null.natal_fits=fit1)
}
time_elapsed <- proc.time() - time_start
time_elapsed
registerDoMC(1)
getDoParWorkers()
?registerDoMC
n_cpu <- detectCores()
print(n_cpu)
#registerDoMC(detectCores())
registerDoMC(1)
getDoParWorkers()
#list.par_analysis <- foreach (i=min(df.null_genes$permutation):max(df.null_genes$permutation)) %dopar% {
time_start <- proc.time()
list.par_analysis <- foreach (i=1:12) %dopar% {
i = i+1
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
n_mapped_genes <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
n_unmapped_genes <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
########### Extracting expression data for current null genes ##########
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
########################## Returning results ######################
list(n_mapped_genes=n_mapped_genes, n_unmapped_genes=n_unmapped_genes, list.null=df.summary, list.null.natal_fits=fit1)
}
time_elapsed <- proc.time() - time_start
time_elapsed
names(list.par_analysis)
list.par_analysis[[1]]
names(list.par_analysis[[1]])
class(list.par_analysis[1])
class(list.par_analysis[[1]])
class(list.par_analysis[[1]][1])
class(list.par_analysis[[1]][[1]])
?llply
?'[['
[[]]
[[
[
`like this` <- 2
"like that" <- 3
print(`like this`)
print("like that")
`[`
Sys.time()
x <- Sys.time()
x
attributes(x)
x - Sys.time()
?Sys.time
system.time()
?system.time()
print(time_elapsed)
list.null <- lapply(list.par_analysis, "[[", "list.null")
?ldply
df.null.mapping <- ldpply(list.par_analysis, "[[", "n_mapped_genes")
df.null.mapping <- ldply(list.par_analysis, "[[", "n_mapped_genes")
View(df.null.mapping)
df.null.mapping <- ldply(list.par_analysis, "[[", "n_mapped_genes", .id="n_mapped")
View(df.null.mapping)
df.null.mapping <- ldply(list.par_analysis, "[[", "n_mapped_genes", .id="n_mapped")
View(df.null.mapping)
df.null.mapping <- ldply(list.par_analysis, "[[", "n_mapped_genes", .id="n_mapped")
View(df.null.mapping)
df.null.mapping <- ldply(list.par_analysis, "[[", c("n_mapped_genes", "n_mapped_genes"), .id="n_mapped")
df.null.mapping <- ldply(list.par_analysis, function(x) {x[[c("n_mapped_genes"]], .id="n_mapped")
df.null.mapping <- ldply(list.par_analysis, function(x) {x[[c("n_mapped_genes"]]}, .id="n_mapped")
df.null.mapping <- ldply(list.par_analysis, function(x) {x[[c("n_mapped_genes"]]})
df.null.mapping <- ldply(list.par_analysis, function(x) {x[["n_mapped_genes"]]})
x <- lapply(list.par_analysis, "[", c(1,2))
x[[1]]
class(x[[1]])
x <- ldply(list.par_analysis, "[", c(1,2))
x <- ldply(list.par_analysis, "[[", c(1,2))
x <- ldply(list.par_analysis, "[", c(1,2))
df.null.mapping <- ldply(list.par_analysis, function(x) {c(x[["n_mapped_genes"]], x[["n_mapped_genes"]])})
View(df.null.mapping)
df.null.mapping <- ldply(list.par_analysis, function(x) {data.frame(x[["n_mapped_genes"]], x[["n_unmapped_genes"]])})
View(df.null.mapping)
n_cpu <- detectCores()
print(n_cpu)
#registerDoMC(detectCores())
registerDoMC(4)
getDoParWorkers()
#list.par_analysis <- foreach (i=min(df.null_genes$permutation):max(df.null_genes$permutation)) %dopar% {
time_start <- proc.time()
list.par_analysis <- foreach (i=1:12) %dopar% {
i = i+1
####### Subsetting null genes to current permutation #####
df.null.current <- subset(df.null_genes, permutation==(i-1)) # OBS: i-1, because permutations are zero-based
##### Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow ####
n_mapped_genes <- sum(df.expression_matrix.clean$ensembl_gene_id %in% df.null.current$ensembl_gene_id) # mapped genes
n_unmapped_genes <- sum(!df.null.current$ensembl_gene_id %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
df.null.mapping <- data.frame(n_mapped_genes=n_mapped_genes, n_unmapped_genes=n_unmapped_genes)
########### Extracting expression data for current null genes ##########
df.expr.subset <- subset(df.expression_matrix.clean.melt, subset=ensembl_gene_id %in% df.null.current$ensembl_gene_id)
##### adding stage_natal (prenatal vs post-natal) #####
df.expr.subset$natal <- NA
df.expr.subset[df.expr.subset$stage %in% c("s1","s2a","s2b","s3a","s3b","s4","s5"), "natal"] <- "prenatal"
df.expr.subset[df.expr.subset$stage %in% c("s6","s7","s8","s9","s10","s11"), "natal"] <- "postnatal"
df.expr.subset$natal <- as.factor(df.expr.subset$natal)
######### T-test: prenatal vs postnatal ######
fit1 <- t.test(value~natal, data=df.expr.subset, alternative="greater")
########### Calculating summaries ##########
df.summary <- ddply(df.expr.subset, c("stage", "structure_acronym"), summarise,
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
### Adding factor
df.summary$permutation <- i
########################## Returning results ######################
list(df.null.mapping=df.null.mapping, list.null=df.summary, list.null.natal_fits=fit1)
}
time_elapsed <- proc.time() - time_start
print(time_elapsed)
df.null.mapping <- ldply(list.par_analysis, "[[", "df.null.mapping")
View(df.null.mapping)
print(time_elapsed)
ls()
?options
