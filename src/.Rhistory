return (p)
}
p <- do_stage_converter(p)
do_stage_converter <- function (p) {
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
return(p)
}
p <- do_stage_converter(p)
p
?scale_colour_hue
df2 <- read.table(header=T, text='
cond1 cond2 yval
A      I 2
A      J 2.5
A      K 1.6
B      I 2.2
B      J 2.4
B      K 1.2
C      I 1.7
C      J 2.3
C      K 1.9
')
ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar() + scale_fill_brewer(palette="Set1")
# Two variables
df <- read.table(header=T, text='
cond yval
A 2
B 2.5
C 1.6
')
ggplot(df2, aes(x=cond, y=yval, fill=cond)) + geom_bar() + scale_fill_brewer(palette="Set1")
View(df)
ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar() + scale_fill_brewer(palette="Set1")
library(ggplot2)
library(reshape2)
rm(list=ls())
install.packages("")
library(ggplot2)
library(reshape2)
#install.packages("")
rm(list=ls())
# Two variables
df <- read.table(header=T, text='
cond yval
A 2
B 2.5
C 1.6
')
df2 <- read.table(header=T, text='
cond1 cond2 yval
A      I 2
A      J 2.5
A      K 1.6
B      I 2.2
B      J 2.4
B      K 1.2
C      I 1.7
C      J 2.3
C      K 1.9
')
ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar() + scale_fill_brewer(palette="Set1")
ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity") + scale_fill_brewer(palette="Set1")
p <- ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity")
p
p <- ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity")
p
p + scale_fill_brewer(palette="Set1")
p <- ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity")
p
p1 <- p + scale_fill_brewer(palette="Set1")
p1
p1 + scale_color_manual(name="MyTest", values=c("A"="gray",
"B"="#d7191c",
"C"="black"))
p <- ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity")
p
p1 <- p + scale_fill_brewer(palette="Set1")
p1
p1 + scale_color_manual(name="MyTest", values=c("A"="gray",
"B"="#d7191c",
"C"="black"))
p <- ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity")
p
p1 <- p + scale_fill_brewer(palette="Set1")
p1
p1 + scale_fill_manual(name="MyTest", values=c("A"="gray",
"B"="#d7191c",
"C"="black"))
?cmap
cmap <- c("A"="gray", "B"="#d7191c", "C"="black")
p <- ggplot(df, aes(x=cond, y=yval, fill=cond)) + geom_bar(stat="identity")
p
p + scale_fill_manual(name="MyTest", values=cmap)
p + scale_fill_manual(name="MyTest", values=cmap)
p1 <- p + scale_fill_brewer(palette="Set1")
p1
p1 + scale_fill_manual(name="MyTest", values=cmap)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
display.brewer.pal(n = 8, name = 'Dark2')
?display.brewer.pal
brewer.pal(n = 8, name = "Dark2")
############### SYNAPSIS ###################
# This script is the EXTENDED VERSION of "graphics_main1_median.R"
# The script loads the same gene lists, but also load the "null"
# The script will make additional statistical tests to plot
# Loads data for either RNAseq/Microarray and associated/prioritized null genes
############################################
library(plyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- "/Users/pascaltimshel/p_scz/brainspan/src"
setwd(wd)
############################# FUNCTIONS #################################
######### Adding x-tickmarks for stage
do_stage_converter <- function (p) {
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
return(p)
}
############################# LOAD EXPRESSION DATA #################################
#load(file="RData/data_marray_expression.RData") # df.expression_matrix.clean, df.expression_matrix.clean.melt
load(file="RData/data_rnaseq_expression_processed.RData") # RNAseq AFTER PROCESSING | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
########################################### LOAD NULL data ###################################
################################## ** ASSOCIATED genes ** ##########################
### marray
#load("RData/null_RData_broad_marray_associated_priority.RData") #time_elapsed, list.par_analysis
### rnaseq
load("RData/null_RData_broad_rnaseq_associated_priority.RData") #time_elapsed, list.par_analysis
############### Extracting from list
list.null.mean.summary <- lapply(list.par_analysis, "[[", "df.null.mean.summary")
list.null.median.summary <- lapply(list.par_analysis, "[[", "df.null.mean.summary")
############## Combining summary data frames
df.null.mean.summary.assoc <- ldply(list.null.mean.summary) # COMBINING list of data frames
df.null.median.summary.assoc <- ldply(list.null.median.summary) # COMBINING list of data frames
#*OBS*: consider doing one more ddply around a c("stage", "permutation")
df.null.median.summary.sem.assoc <- ddply(df.null.median.summary.assoc, c("stage"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
################################ ** PRIORITIZED genes ** #########################
### marray
#load("RData/null_RData_broad_marray_prioritized_priority.RData") #time_elapsed, list.par_analysis
### rnaseq
load("RData/null_RData_broad_rnaseq_prioritized_priority.RData") #time_elapsed, list.par_analysis
############### Extracting from list
list.null.mean.summary <- lapply(list.par_analysis, "[[", "df.null.mean.summary")
list.null.median.summary <- lapply(list.par_analysis, "[[", "df.null.mean.summary")
############## Combining summary data frames
df.null.mean.summary.prio <- ldply(list.null.mean.summary) # COMBINING list of data frames
df.null.median.summary.prio <- ldply(list.null.median.summary) # COMBINING list of data frames
df.null.median.summary.sem.prio <- ddply(df.null.median.summary.prio, c("stage"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
############################# READING GENE LISTs #################################
path.datafiles <- '/Users/pascaltimshel/p_scz/brainspan/gene_lists'
###### Read into a list of files - PATTERN VERSION - read ALL .txt files in directory:
#files <- list.files(path = path.datafiles, pattern = "*.txt", full.names = TRUE) #full path
#names(files) <- list.files(path = path.datafiles, pattern = "*.txt") # filename
#cat(names(files), sep="\n")
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt", "gene_psd_human.txt", "gene_psd_mouse.txt")
filenames2read <- c(filenames2read, "gilman_nn_2012_cluster1.ens", "gilman_nn_2012_cluster1a.ens", "gilman_nn_2012_cluster1b.ens", "gilman_nn_2012_cluster2.ens")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
###################################### PROCESSING GILMAN ################################
gilman_lvl <- c("gilman_nn_2012_cluster1.ens", "gilman_nn_2012_cluster2.ens") # THIS should correspond to the filesnames
###### Mean per stage/structure/cluster
df.gilman.summary.cluster.sem <- ddply(ddply(subset(df.gene_list, gene_list %in% gilman_lvl), .(stage, structure_acronym, gene_list), summarise, mean=median(value, na.rm=TRUE)), .(stage, gene_list), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
## plyr magic for renaming column and factor level
df.gilman.summary.cluster.sem <- rename(df.gilman.summary.cluster.sem, c("gene_list"="cluster")) # column
df.gilman.summary.cluster.sem$cluster <- revalue(df.gilman.summary.cluster.sem$cluster, c("gilman_nn_2012_cluster1.ens"="clusterI", "gilman_nn_2012_cluster2.ens"="clusterII"))
###### Mean per stage/structure ########
df.gilman.summary <- ddply(subset(df.gene_list, gene_list %in% gilman_lvl), c("stage", "structure_acronym"), summarise,
mean = median(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
###### Mean per stage - FINAL ##########
df.gilman.summary.sem <- ddply(df.gilman.summary, c("stage"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### PROCESSING GENE lists ################################
###### Mean per stage/structure ########
df.summary <- ddply(df.gene_list, c("stage", "structure_acronym", "gene_list"), summarise,
mean = median(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE))
## plyr magic for renaming factor level
levels(df.summary$gene_list)
df.summary$gene_list <- revalue(df.summary$gene_list, c("gene_associated.txt"="Associated Genes", "gene_nearest.txt"="Nearest Genes", "gene_prioritization.txt"="Prioritized Genes", "gene_psd_human.txt"="Post Synaptic Genes (Human)", "gene_psd_mouse.txt"="Post Synaptic Genes (Mouse)"))
levels(df.summary$gene_list)
###### Mean per stage - FINAL ##########
df.summary.sem <- ddply(df.summary, c("stage","gene_list"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### Calculating overall mean ################################
### *** Runtime ~ 10 s ***
df.all.sem <- ddply(ddply(df.expression_matrix.clean.melt, .(stage, structure_acronym), summarise, mean=median(value, na.rm=TRUE)), .(stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
p <- ggplot()
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding NULL PRIORITIZED (median) - ribbon!
p <- p + geom_line(data=df.null.median.summary.sem.prio, aes(x=stage, y=mean1, group=1, color="Prioritized genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.prio, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='black', color='gray')
p
p
######### Adding x-tickmarks for stage
p <- do_stage_converter(p)
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="yellow",
"Prioritized genes (Null)"="#984ea3",
guide='legend'))
p
p <- ggplot()
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding NULL ASSOCIATED (median) - ribbon!
#p <- p + geom_line(data=df.null.median.summary.sem.assoc, aes(x=stage, y=mean1, group=1, color="Associated genes (Null)"), linetype='solid', size=1)
#p <- p + geom_ribbon(data=df.null.median.summary.sem.assoc, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='black', color='gray')
#p
### Adding NULL PRIORITIZED (median) - ribbon!
p <- p + geom_line(data=df.null.median.summary.sem.prio, aes(x=stage, y=mean1, group=1, color="Prioritized genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.prio, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.3, fill='mediumorchid1', color='gray')
p
######### Adding x-tickmarks for stage
p <- do_stage_converter(p)
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="yellow",
"Prioritized genes (Null)"="mediumorchid1",
guide='legend'))
p
p <- ggplot()
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding NULL ASSOCIATED (median) - ribbon!
#p <- p + geom_line(data=df.null.median.summary.sem.assoc, aes(x=stage, y=mean1, group=1, color="Associated genes (Null)"), linetype='solid', size=1)
#p <- p + geom_ribbon(data=df.null.median.summary.sem.assoc, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='black', color='gray')
#p
### Adding NULL PRIORITIZED (median) - ribbon!
p <- p + geom_line(data=df.null.median.summary.sem.prio, aes(x=stage, y=mean1, group=1, color="Prioritized genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.prio, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.3, fill='lightskyblue3', color='gray')
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="yellow",
"Prioritized genes (Null)"="lightskyblue3",
guide='legend'))
p
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
### VARIABLE
p <- p + labs(y="Mean brain expression")
p
######### Adding x-tickmarks for stage
p <- do_stage_converter(p)
p
p <- p + labs(y="Mean brain expression", title="RNAseq")
p
p <- p + geom_line(data=df.null.median.summary.sem.assoc, aes(x=stage, y=mean1, group=1, color="Associated genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.assoc, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='cadetblue', color='gray')
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="cadetblue",
"Prioritized genes (Null)"="lightskyblue3",
guide='legend'))
p
p <- p + geom_line(data=df.null.median.summary.sem.assoc, aes(x=stage, y=mean1, group=1, color="Associated genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.assoc, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='darkolivegreen3', color='gray')
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="darkolivegreen3",
"Prioritized genes (Null)"="lightskyblue3",
guide='legend'))
p
p <- ggplot()
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding NULL ASSOCIATED (median) - ribbon!
p <- p + geom_line(data=df.null.median.summary.sem.assoc, aes(x=stage, y=mean1, group=1, color="Associated genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.assoc, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='darkolivegreen3', color='gray')
p
### Adding NULL PRIORITIZED (median) - ribbon!
p <- p + geom_line(data=df.null.median.summary.sem.prio, aes(x=stage, y=mean1, group=1, color="Prioritized genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.prio, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.3, fill='lightskyblue3', color='gray')
p
### VARIABLE
p <- p + labs(y="Mean brain expression", title="RNAseq")
p
######### Adding x-tickmarks for stage
p <- do_stage_converter(p)
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="darkolivegreen3",
"Prioritized genes (Null)"="lightskyblue3",
guide='legend'))
p
p <- ggplot()
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
### Adding NULL ASSOCIATED (median) - ribbon!
p <- p + geom_line(data=df.null.median.summary.sem.assoc, aes(x=stage, y=mean1, group=1, color="Associated genes (Null)"), linetype='solid', size=1)
p <- p + geom_ribbon(data=df.null.median.summary.sem.assoc, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.5, fill='darkolivegreen3', color='gray')
p
### Adding NULL PRIORITIZED (median) - ribbon!
#p <- p + geom_line(data=df.null.median.summary.sem.prio, aes(x=stage, y=mean1, group=1, color="Prioritized genes (Null)"), linetype='solid', size=1)
#p <- p + geom_ribbon(data=df.null.median.summary.sem.prio, aes(x=stage, group=1, ymin=mean1-sd1, ymax=mean1+sd1), alpha=0.3, fill='lightskyblue3', color='gray')
#p
### VARIABLE
p <- p + labs(y="Mean brain expression", title="RNAseq")
p
######### Adding x-tickmarks for stage
p <- do_stage_converter(p)
p
p <- p + scale_color_manual(name="Gene list", values=c("Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Gilman et al. clusters I & II"="#2b83ba",
"Nearest genes"="orange",
"Associated genes"="orange",
"Post synaptic genes (mouse)"="green",
"Post synaptic genes (human)"="blue",
"Associated genes (Null)"="darkolivegreen3",
"Prioritized genes (Null)"="lightskyblue3",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
############### SYNOPSIS ###################
# This script will analyze the columns file
# The script will produce the following
# 1) CONTINGENCY TABLE plot
# 2) Marginal barplot
# The script also performs comparison of the samples for Microarray and RNAseq
############################################
library(ggplot2)
library(reshape2)
library(plyr)
rm(list=ls())
wd <- "/Users/pascaltimshel/p_scz/brainspan/src"
setwd(wd)
########### SOURCING ###########
source("function_def_stages.R", echo=TRUE)
file.columns <- "../data/141031/rnaseq/columns_metadata.csv"
########### READ columns file ###########
df.columns <- read.csv(file.columns,h=T,row.names=1)
#### Add stage column
df.columns$stage <- as.factor(sapply(df.columns$age, function(x) {names(stages)[sapply(stages, function(stage) x %in% stage)]}))
#### Sort factor levels of "stage"
df.columns$stage <- factor(df.columns$stage, levels(df.columns$stage)[match(order.stages, levels(df.columns$stage))])
######### Number of factor levels for variables
paste("Number of unique donors:", length(unique(df.columns$donor_id)))
paste("Number of unique age:", length(unique(df.columns$age)))
paste("Number of unique structure_acronum:", length(unique(df.columns$structure_acronym)))
############ Plot contingency table
table.contingency <- table(df.columns$stage, df.columns$structure_acronym)
df.contingency.melt <- melt(table.contingency, varnames=c("stage", "structure"), value.name=c("count"))
p <- ggplot(df.contingency.melt, aes(x=stage,y=structure)) + geom_tile(aes(fill=count))
p <- p + geom_text(aes(label=count), size=rel(5), color="white", family="mono")
p
### Margins
df.margin.stage <- data.frame(margin.table(table.contingency, 1))
df.margin.structure <- data.frame(margin.table(table.contingency, 2))
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity')
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + labs(x="Stage", y="#Samples", size=5)
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + labs(x="Stage", y="#Samples", size=10)
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=10) + labs(x="Stage", y="#Samples", s)
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=10)) + labs(x="Stage", y="#Samples", s)
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=10)) + labs(x="Stage", y="#Samples", s)
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=10)) + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=rel(2))) + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=rel(10))) + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=rel(5))) + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=5)) + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=rel(5))) + labs(x="Stage", y="#Samples")
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=rel(5))) + labs(x="Stage", y="Sample count")
#
ggplot(df.margin.stage, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(text = element_text(size=rel(5))) + labs(x="Stage", y="#Samples")
ggplot(df.margin.structure, aes(x=Var1, y=Freq)) + geom_bar(stat='identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(text = element_text(size=rel(5))) + labs(x="Structure", y="#Samples")
