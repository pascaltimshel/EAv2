### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Nearest Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
p <- p + scale_color_manual(name="Gene list", values=c(
"Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Associated genes"="orange",
"Nearest genes"="sky blue",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
p <- p + labs(y="Mean median brain expression")
p
ggsave("main1_rnaseq_release_v1_median-9x6.pdf", w=9, h=6)
ggsave("main1_BrainCloud_release_v1_median-9x6.pdf", w=9, h=6)
ggsave("main1_BrainCloud_release_v2_median-9x6.pdf", w=9, h=6)
library(dplyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- path.expand("~/p_EAv2/git/EAv2/src_BrainCloud")
setwd(wd)
#release <- "release_v1"
release <- "release_v2"
############################# LOAD EXPRESSION DATA #################################
load(file="RData/data_braincloud_expression_processed.RData") # AFTER MEDIAN | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
### *OBS* DIRTY CODE
############################# READING GENE LISTs #################################
path.datafiles <- path.expand(sprintf("~/p_EAv2/git/EAv2/gene_lists/%s", release))
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
### *NEW March 2015: check number of genes mapping* ###
check_number_of_genes_from_gene_list_mapping <- function(elem_name, list_arg) {
df_gene_list <- list_arg[[elem_name]]
n.genes_mapping <- sum(df_gene_list[,1] %in% ensembl_gene_id)
sprintf("number of genes in gene_list=%s mapping: %s", elem_name, n.genes_mapping)
}
list_arg.new <- lapply(names(list_of_data), check_number_of_genes_from_gene_list_mapping, list_of_data)
### *NEW March 2015: check number of genes mapping* ###
check_number_of_genes_from_gene_list_mapping <- function(elem_name, list_arg) {
df_gene_list <- list_arg[[elem_name]]
n.genes_mapping <- sum(df_gene_list[,1] %in% df.expression_matrix.clean$ensembl_gene_id)
sprintf("number of genes in gene_list=%s mapping: %s", elem_name, n.genes_mapping)
}
list_arg.new <- lapply(names(list_of_data), check_number_of_genes_from_gene_list_mapping, list_of_data)
list_arg.new
check_number_of_genes_from_gene_list_mapping <- function(elem_name, list_arg) {
df_gene_list <- list_arg[[elem_name]]
n.genes <- length(df_gene_list[,1])
n.genes_mapping <- sum(df_gene_list[,1] %in% df.expression_matrix.clean$ensembl_gene_id)
str2print <- sprintf("number of genes in gene_list=%s mapping %s, out of %s genes", elem_name, n.genes_mapping, n.genes)
print(str2print)
return("dummy")
}
list_arg.new <- lapply(names(list_of_data), check_number_of_genes_from_gene_list_mapping, list_of_data)
names(list_arg.new) <- names(list_of_data) # copying names from original list
list_arg.new
#########################################
library(dplyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- path.expand("~/p_EAv2/git/EAv2/src_BrainCloud")
setwd(wd)
#release <- "release_v1"
release <- "release_v2"
############################# LOAD EXPRESSION DATA #################################
load(file="RData/data_braincloud_expression_processed.RData") # AFTER MEDIAN | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
### *OBS* DIRTY CODE
#df.expression_matrix.clean.melt$structure_acronym <- "DLPFC"
############################# READING GENE LISTs #################################
path.datafiles <- path.expand(sprintf("~/p_EAv2/git/EAv2/gene_lists/%s", release))
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
### *NEW March 2015: check number of genes mapping* ###
check_number_of_genes_from_gene_list_mapping <- function(elem_name, list_arg) {
df_gene_list <- list_arg[[elem_name]]
n.genes <- length(df_gene_list[,1])
n.genes_mapping <- sum(df_gene_list[,1] %in% df.expression_matrix.clean$ensembl_gene_id)
str2print <- sprintf("number of genes in gene_list=%s mapping %s, out of %s genes", elem_name, n.genes_mapping, n.genes)
print(str2print)
return("dummy")
}
list_arg.new <- lapply(names(list_of_data), check_number_of_genes_from_gene_list_mapping, list_of_data)
names(list_arg.new) <- names(list_of_data) # copying names from original list
list_arg.new
####### SUBSETTING GENES ######
extract_genes_from_molten_df <- function(df_gene_list) {
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
print("done")
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
}
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
####### SUBSETTING GENES ######
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
###################################### PROCESSING GENE lists ################################
###### Mean per stage/structure ########
df.summary <- ddply(df.gene_list, c("stage", "gene_list"), summarise,
mean1 = median(value, na.rm=TRUE),
sd1   = sd(value, na.rm=TRUE))
## plyr magic for renaming factor level
levels(df.summary$gene_list)
df.summary$gene_list <- revalue(df.summary$gene_list, c("gene_associated.txt"="Associated Genes", "gene_nearest.txt"="Nearest Genes", "gene_prioritization.txt"="Prioritized Genes"))
levels(df.summary$gene_list)
# *BrainCloud QUICKFIX*
df.summary.sem <- df.summary
###### Mean per stage - FINAL ##########
## *BrainCloud Outcommented*
# df.summary.sem <- ddply(df.summary, c("stage","gene_list"), summarise,
#                         sd1   = sd(mean, na.rm=TRUE))
#                         mean1 = mean(mean, na.rm=TRUE),
###################################### Calculating overall mean ################################
### *** Runtime ~ 10 s ***
#df.all.sem <- ddply(ddply(df.expression_matrix.clean.melt, .(stage, structure_acronym), summarise, mean=median(value, na.rm=TRUE)), .(stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
# *BrainCloud VERSION*
df.all.sem <- ddply(df.expression_matrix.clean.melt, .(stage), summarise, mean1=mean(value, na.rm=TRUE),  sd1=sd(value, na.rm=TRUE))
###################################### Save DATA ################################
#save(file="RData/data_rnaseq_expression_processed_with_gene_lists.RData")
###################################### PLOT - 1 ################################
########### PLOT IT! ###########
p <- ggplot()
## *BrainCloud Outcommented*
#p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
#p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Nearest Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
p <- p + scale_color_manual(name="Gene list", values=c(
"Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Nearest genes"="sky blue",
"Associated genes"="orange",
guide='legend'))
p
###### Adding vertical line - prenatal vs. postnatal
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
p <- p + labs(y="Mean median brain expression")
p
ggsave("main1_BrainCloud_release_v2_median-9x6_NO_STRUCTURE.pdf", w=9, h=6)
library(dplyr)
library(ggplot2)
library(reshape2)
library(tools) # for file_path_sans_ext
rm(list=ls())
wd <- path.expand("~/p_EAv2/git/EAv2/src_BrainCloud")
setwd(wd)
#release <- "release_v1"
release <- "release_v2"
############################# LOAD EXPRESSION DATA #################################
load(file="RData/data_braincloud_expression_processed.RData") # AFTER MEDIAN | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
### *OBS* DIRTY CODE
df.expression_matrix.clean.melt$structure_acronym <- "DLPFC"
############################# READING GENE LISTs #################################
### EA
#path.datafiles <- path.expand(sprintf("~/p_EAv2/git/EAv2/gene_lists/%s", release))
### SCZ
path.datafiles <- path.expand(sprintf("~p_scz/brainspan/gene_lists))
#/Users/pascaltimshel/Dropbox/0_Projects/p_scz/brainspan/gene_lists
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
### SCZ
path.datafiles <- path.expand(sprintf("~p_scz/brainspan/gene_lists"))
#/Users/pascaltimshel/Dropbox/0_Projects/p_scz/brainspan/gene_lists
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
path.datafiles
path.datafiles <- path.expand(sprintf("~/p_scz/brainspan/gene_lists"))
path.datafiles
path.datafiles <- path.expand(sprintf("~/p_scz/brainspan/gene_lists"))
#/Users/pascaltimshel/Dropbox/0_Projects/p_scz/brainspan/gene_lists
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
### *NEW March 2015: check number of genes mapping* ###
check_number_of_genes_from_gene_list_mapping <- function(elem_name, list_arg) {
df_gene_list <- list_arg[[elem_name]]
n.genes <- length(df_gene_list[,1])
n.genes_mapping <- sum(df_gene_list[,1] %in% df.expression_matrix.clean$ensembl_gene_id)
str2print <- sprintf("number of genes in gene_list=%s mapping %s, out of %s genes", elem_name, n.genes_mapping, n.genes)
print(str2print)
return("dummy")
}
list_arg.new <- lapply(names(list_of_data), check_number_of_genes_from_gene_list_mapping, list_of_data)
names(list_arg.new) <- names(list_of_data) # copying names from original list
list_arg.new
####### SUBSETTING GENES ######
extract_genes_from_molten_df <- function(df_gene_list) {
print("done")
df <- subset(df.expression_matrix.clean.melt, ensembl_gene_id %in% df_gene_list[,1])
}
df.gene_list <- ldply(list_of_data, extract_genes_from_molten_df, .id="gene_list")
## Converting .id=gene_list to factor
df.gene_list$gene_list <- as.factor(df.gene_list$gene_list)
str(df.gene_list)
levels(df.gene_list$gene_list)
###################################### PROCESSING GENE lists ################################
###### Mean per stage/structure ########
df.summary <- ddply(df.gene_list, c("stage", "structure_acronym", "gene_list"), summarise,
mean = median(value, na.rm=TRUE),
## plyr magic for renaming factor level
sd   = sd(value, na.rm=TRUE))
levels(df.summary$gene_list)
df.summary$gene_list <- revalue(df.summary$gene_list, c("gene_associated.txt"="Associated Genes", "gene_nearest.txt"="Nearest Genes", "gene_prioritization.txt"="Prioritized Genes"))
levels(df.summary$gene_list)
###### Mean per stage - FINAL ##########
df.summary.sem <- ddply(df.summary, c("stage","gene_list"), summarise,
mean1 = mean(mean, na.rm=TRUE),
sd1   = sd(mean, na.rm=TRUE))
###################################### Calculating overall mean ################################
### *** Runtime ~ 10 s ***
df.all.sem <- ddply(ddply(df.expression_matrix.clean.melt, .(stage, structure_acronym), summarise, mean=median(value, na.rm=TRUE)), .(stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
###################################### Save DATA ################################
#save(file="RData/data_rnaseq_expression_processed_with_gene_lists.RData")
###################################### PLOT - 1 ################################
########### PLOT IT! ###########
p <- ggplot()
p <- p + geom_line(data=subset(df.summary, gene_list == "Prioritized Genes"), aes(x=stage, y=mean, group=structure_acronym, color="Prioritized genes (structures)")) #linetype="Brain regions"
p
### Adding mean Prioritized
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, y=mean1, group=1, color="Prioritized genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Prioritized Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='#d7191c', width=0.2)
p
### Adding mean ALL (df.all.sem)
p <- p + geom_line(data=df.all.sem, aes(x=stage, y=mean1, group=1, color="All genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=df.all.sem, aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1),color='black', width=0.2)
p
### Adding Nearest Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, y=mean1, group=1, color="Nearest genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Nearest Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='sky blue', width=0.2)
p
### Adding Associated Genes
p <- p + geom_line(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, y=mean1, group=1, color="Associated genes"), linetype='solid', size=1)
p <- p + geom_errorbar(data=subset(df.summary.sem, gene_list == "Associated Genes"), aes(x=stage, ymax=mean1+sd1, ymin=mean1-sd1), color='orange', width=0.2)
p
p <- p + scale_color_manual(name="Gene list", values=c(
"Prioritized genes (structures)"="gray",
"Prioritized genes"="#d7191c",
"All genes"="black",
"Nearest genes"="sky blue",
"Associated genes"="orange",
guide='legend'))
###### Adding vertical line - prenatal vs. postnatal
p
p <- p + geom_vline(xintercept=6.5, color="black", linetype="dashed")
p
######### Adding x-tickmarks for stage
stage_converter <- c("s1"="Embryonic",
"s2a"="Early prenatal",
"s2b"="Early prenatal",
"s3a"="Early mid-prenatal",
"s3b"="Early mid-prenatal",
"s4"="Late mid-prenatal",
"s5"="Late prenatal",
"s6"="Early infancy",
"s7"="Late infancy",
"s8"="Early childhood",
"s9"="Late childhood",
"s10"="Adolescence",
"s11"="Adulthood")
p <- p + scale_x_discrete(name="", labels = stage_converter) + theme(axis.text.x = element_text(angle = 35, hjust = 1, size=rel(1.15)))
p
### SUPP FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,1,0.1))))
### MAIN FIG
#p <- p + guides(colour = guide_legend(keywidth = 2, keyheight = 1, override.aes = list(size=c(1,1,1,0.1)))) #"Prioritized genes (structures)"=0.1
### VARIABLE
p <- p + labs(y="Mean median brain expression")
p
ggsave("main1_BrainCloud_SCZ_median-9x6.pdf", w=9, h=6)
rm(list=ls())
wd <- path.expand("~/p_EAv2/git/EAv2/src_BrainCloud")
setwd(wd)
#release <- "release_v1"
release <- "release_v2"
############################# LOAD EXPRESSION DATA #################################
load(file="RData/data_braincloud_expression_processed.RData") # AFTER MEDIAN | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
### *OBS* DIRTY CODE
df.expression_matrix.clean.melt$structure_acronym <- "DLPFC"
############################# READING GENE LISTs #################################
### EA
path.datafiles <- path.expand(sprintf("~/p_EAv2/git/EAv2/gene_lists/%s", release))
### SCZ
#path.datafiles <- path.expand(sprintf("~/p_scz/brainspan/gene_lists"))
#/Users/pascaltimshel/Dropbox/0_Projects/p_scz/brainspan/gene_lists
###### Read SPECIFIC FILES:
filenames2read <- c("gene_associated.txt", "gene_nearest.txt", "gene_prioritization.txt")
files <- as.list(paste(path.datafiles, filenames2read, sep="/"))
names(files) <- filenames2read
files
list_of_data <- llply(files, read.csv)#row.names = 1 --> NO!, stringsAsFactors = FALSE
names(list_of_data)
### *NEW March 2015: check number of genes mapping* ###
check_number_of_genes_from_gene_list_mapping <- function(elem_name, list_arg) {
df_gene_list <- list_arg[[elem_name]]
n.genes <- length(df_gene_list[,1])
n.genes_mapping <- sum(df_gene_list[,1] %in% df.expression_matrix.clean$ensembl_gene_id)
str2print <- sprintf("number of genes in gene_list=%s mapping %s, out of %s genes", elem_name, n.genes_mapping, n.genes)
print(str2print)
return("dummy")
}
list_arg.new <- lapply(names(list_of_data), check_number_of_genes_from_gene_list_mapping, list_of_data)
names(list_arg.new) <- names(list_of_data) # copying names from original list
list_arg.new
#source("multiplot.R")
####################################### LOAD DATA ###########################################
load(file="RData/data_braincloud_expression_processed.RData") # AFTER MEDIAN | df.expression_matrix.clean, df.expression_matrix.clean.melt
str(df.expression_matrix.clean.melt)
### *OBS* DIRTY CODE
df.expression_matrix.clean.melt$structure_acronym <- "DLPFC"
########### Setting prioritization #########
file.gene_prioritization <- sprintf("../gene_lists/%s/gene_prioritization.txt", release)
#file.gene_prioritization <- sprintf("../gene_lists/%s/gene_associated.txt", release)
gene_list <- basename(file_path_sans_ext(file.gene_prioritization))
########### READ prioritization file ###########
df.gene_prioritization <- read.csv(file.gene_prioritization,h=T)
## Check mapping - compare to "df.expression_matrix.clean" NOT MOLTEN, will be too slow
sum(df.expression_matrix.clean$ensembl_gene_id %in% df.gene_prioritization[,1]) # mapped genes
sum(!df.gene_prioritization[,1] %in% df.expression_matrix.clean$ensembl_gene_id) # non-mapped genes
cat(as.character(df.gene_prioritization[!df.gene_prioritization[,1] %in% df.expression_matrix.clean$ensembl_gene_id,]), sep="\n") # print non-mapped genes
### Setting priorizied factor for MOLTEN df
df.expression_matrix.clean.melt$gene_type <- as.factor(ifelse(df.expression_matrix.clean.melt$ensembl_gene_id %in% df.gene_prioritization[,1], "prioritized", "other"))
table(df.expression_matrix.clean.melt$gene_type)
str(df.expression_matrix.clean.melt)
################################# STATISTICAL TESTs ##################################
################## PREPARING FOR TEST ###############
## subsetting on prioritized/associated genes
df.expression_matrix.clean.melt.priori <- subset(df.expression_matrix.clean.melt, gene_type=="prioritized")
## calculating mean for each gene in prenatal and postnatal
df.natal.gene.mean <- ddply(df.expression_matrix.clean.melt.priori, .(ensembl_gene_id, natal), summarise,
mean=mean(value, na.rm=T))
################## T-test: prenatal vs postnatal | *PAIRED* ###############
# df.tmp.prenatal <- subset(df.natal.gene.mean, natal=="prenatal")
# df.tmp.postnatal <- subset(df.natal.gene.mean, natal=="postnatal")
# fit.test <- t.test(df.tmp.postnatal$mean, df.tmp.prenatal$mean, alternative="greater", paired=TRUE)
# fit.test # USING VECTORS ---> 0.3211001
### t.test
levels(df.natal.gene.mean$natal)
fit1 <- t.test(mean~natal, data=df.natal.gene.mean, alternative="less", paired=TRUE) # OBS: EAv2 is testing "less" (SCZ was testing alternative="greater")
fit1
fit1$p.value
### calculation odd's ratio
df.or <- ddply(df.natal.gene.mean, .(natal), summarise,
group_mean=mean(mean, na.rm=T))
df.or
or_log2_corrected <- (2^df.or[df.or$natal=="prenatal","group_mean"]-1)/(2^df.or[df.or$natal=="postnatal","group_mean"]-1)
#formula: or = ((2^mu1)-1)/((2^mu2)-1)
or_log2_corrected
### plotting distribution of mean values
q1 <- ggplot(df.natal.gene.mean, aes(x=mean, fill=natal)) + geom_histogram(aes(y=..density..)) +geom_density(alpha=0.8)
### plotting box plot
q2 <- ggplot(df.natal.gene.mean, aes(x=natal, y=mean, fill=natal)) + geom_boxplot()
multiplot(q1,q2)
#######################################################################################################################
################## T-test: identifing most highly expressed stage - and testing for difference to other stages ###############
################# PREPARING FOR TEST - step#1: calculate mean of each gene for each stage ###############
##### WITHOUT "prior" median for structure  ######
# ---> We do not use approach because it is NOT similar to how we plot data
# ---> This approach makes sense since it gives a "weighted" average
#      ----> here structures with low samples does NOT count as much as structures with many samples
#df.mean.prio <- ddply(df.expression_matrix.clean.melt.priori, .(ensembl_gene_id, stage), summarise,
#                            mean1=mean(value, na.rm=T))
##### WITH "prior" median for structure ######
# ---> We use this approach because it IS SIMILAR TO HOW WE PLOT DATA
# ---> This is not an weighted average approach
df.mean.prio <- ddply(ddply(df.expression_matrix.clean.melt.priori, .(ensembl_gene_id, stage, structure_acronym), summarise, mean=median(value, na.rm=TRUE)), .(ensembl_gene_id, stage), summarise, mean1=mean(mean, na.rm=TRUE),  sd1=sd(mean, na.rm=TRUE))
################# PREPARING FOR TEST - step#2: calculate mean value across all genes for each stage  ###############
### This data frame is only used for identifying the HIGHEST expressed stages and PLOTTING
df.mean.prio.stage <- ddply(df.mean.prio, .(stage), summarise,
mean_stage=mean(mean1),
sd_stage=sd(mean1))
################# PREPARING FOR TEST - step#3: plot it! #################
p <- ggplot(data=df.mean.prio, aes(x=stage, y=mean1)) + geom_line(aes(group=ensembl_gene_id, color=ensembl_gene_id))
p <- p + geom_line(data=df.mean.prio.stage, aes(x=stage, y=mean_stage, group=1), size=1.5, color="black")
p <- p + geom_errorbar(data=df.mean.prio.stage, aes(x=stage, y=mean_stage, ymin=mean_stage-sd_stage, ymax=mean_stage+sd_stage, group=1), size=1.5, color="black")
p
################# PREPARING FOR TEST - step#4: identify highest expressed stage #################
df.mean.prio.stage[order(-df.mean.prio.stage$mean_stage),]
# ---> s11 has the highest mean expression
# stage mean_stage sd_stage
# 12   s11   3.214713 1.618984
# 7     s6   3.196868 1.638089
# 11   s10   3.177876 1.640300
################# MAKING TEST - step#5 #################
stage_to_test_against <- "s3b" # SCZ="s11"
df.mean.prio.stage[order(-df.mean.prio.stage$mean_stage),]
stage_to_test_against <- "s2b" # "s3b" # SCZ="s11"
df_test_against <- subset(df.mean.prio, stage==stage_to_test_against)
df_rest <- subset(df.mean.prio, stage!=stage_to_test_against)
ttest_stage <- function(df) {
x <- df_test_against$mean1 # *OBS*: mean1
y <- df$mean1 # *OBS*: mean1
### *PAIRED t-test* ###
t.test(x, y, alternative="greater", paired=TRUE)$p.value # alternative = "greater" is the alternative that x has a larger mean than y.
#t.test(x, y, alternative="greater", paired=TRUE) # ---> use this in COMBINATION WITH dlply
}
#### Making tests
#df.ttest_stage.list <- dlply(df_rest, .(stage), ttest_stage)
df.ttest_stage <- ddply(df_rest, .(stage), ttest_stage)
#### Sorting by p-value
df.ttest_stage.ordered <- df.ttest_stage[order(-df.ttest_stage[,2]),]
df.ttest_stage.ordered
#### Get stages that are NOT significant after BONFERRONI CORRECTION
df.ttest_stage.ordered[df.ttest_stage.ordered[,2] > 0.05/10,]
